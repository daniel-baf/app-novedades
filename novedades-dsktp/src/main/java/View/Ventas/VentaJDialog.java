/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View.Ventas;

import Model.DB.Domain.Inventario.InventarioSucursal;
import Model.DB.Domain.Usuario.ClienteEspecial;
import Model.DB.Domain.Venta.CartItem;
import Model.DB.Domain.Venta.ShoppingCart;
import Utils.CustomException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jefe_mayoneso
 */
public class VentaJDialog extends javax.swing.JFrame {

    /**
     * Creates new form VentaJDialog
     */
    public VentaJDialog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerJPanel = new javax.swing.JPanel();
        inventorySectionJPanel = new javax.swing.JPanel();
        inventorySearchJPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        searchJTextField = new javax.swing.JTextField();
        searchTypeJComboBox = new javax.swing.JComboBox<>();
        searchJButton = new javax.swing.JButton();
        inventoryListSectionJPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productsResultJTable = new javax.swing.JTable();
        inventoryAddSectionPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cuantityAddJTextField = new javax.swing.JTextField();
        addToCartJButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        loadMoreJButton = new javax.swing.JButton();
        sellsSectionJPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartlistJTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        specialClientJLabel = new javax.swing.JLabel();
        nitJLabel = new javax.swing.JLabel();
        nameJLabel = new javax.swing.JLabel();
        totalJLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        checkoutJButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        optionsJMenu = new javax.swing.JMenu();
        specialClientJMenuButton = new javax.swing.JMenuItem();
        sortAllShopsJMenuButotn = new javax.swing.JCheckBoxMenuItem();
        jMenu2 = new javax.swing.JMenu();
        insertNitJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        containerJPanel.setLayout(new javax.swing.BoxLayout(containerJPanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setText("Busqueda");
        inventorySearchJPanel.add(jLabel2);

        searchJTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        inventorySearchJPanel.add(searchJTextField);

        inventorySearchJPanel.add(searchTypeJComboBox);

        searchJButton.setText("Buscar");
        inventorySearchJPanel.add(searchJButton);

        productsResultJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Pieza", "Color", "Producto", "Talla", "Precio", "Precio 2", "Sucursal", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productsResultJTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addContainerGap())
        );

        inventoryAddSectionPanel.setLayout(new javax.swing.BoxLayout(inventoryAddSectionPanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("Cantidad");
        jPanel3.add(jLabel1);

        cuantityAddJTextField.setText("1");
        cuantityAddJTextField.setMinimumSize(new java.awt.Dimension(100, 25));
        cuantityAddJTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        jPanel3.add(cuantityAddJTextField);

        addToCartJButton.setText("AGREGAR");
        jPanel3.add(addToCartJButton);

        inventoryAddSectionPanel.add(jPanel3);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        loadMoreJButton.setText("CARGAR MAS");
        jPanel4.add(loadMoreJButton);

        inventoryAddSectionPanel.add(jPanel4);

        javax.swing.GroupLayout inventoryListSectionJPanelLayout = new javax.swing.GroupLayout(inventoryListSectionJPanel);
        inventoryListSectionJPanel.setLayout(inventoryListSectionJPanelLayout);
        inventoryListSectionJPanelLayout.setHorizontalGroup(
            inventoryListSectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inventoryAddSectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        inventoryListSectionJPanelLayout.setVerticalGroup(
            inventoryListSectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryListSectionJPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inventoryAddSectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout inventorySectionJPanelLayout = new javax.swing.GroupLayout(inventorySectionJPanel);
        inventorySectionJPanel.setLayout(inventorySectionJPanelLayout);
        inventorySectionJPanelLayout.setHorizontalGroup(
            inventorySectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventorySectionJPanelLayout.createSequentialGroup()
                .addGroup(inventorySectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inventorySectionJPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(inventorySearchJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE))
                    .addComponent(inventoryListSectionJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        inventorySectionJPanelLayout.setVerticalGroup(
            inventorySectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventorySectionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inventorySearchJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inventoryListSectionJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        containerJPanel.add(inventorySectionJPanel);

        cartlistJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID prenda", "Nombre", "Talla", "Color", "Precio", "Cantidad", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cartlistJTable);
        if (cartlistJTable.getColumnModel().getColumnCount() > 0) {
            cartlistJTable.getColumnModel().getColumn(2).setResizable(false);
            cartlistJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel6.setLayout(new java.awt.GridLayout(4, 1, 1, 0));

        specialClientJLabel.setText("Cliene especial: ");
        jPanel6.add(specialClientJLabel);

        nitJLabel.setText("NIT: ");
        jPanel6.add(nitJLabel);

        nameJLabel.setText("Nombre: ");
        jPanel6.add(nameJLabel);

        totalJLabel.setText("Total: ");
        jPanel6.add(totalJLabel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        checkoutJButton.setText("PROCEDER VENTA");
        jPanel5.add(checkoutJButton);

        javax.swing.GroupLayout sellsSectionJPanelLayout = new javax.swing.GroupLayout(sellsSectionJPanel);
        sellsSectionJPanel.setLayout(sellsSectionJPanelLayout);
        sellsSectionJPanelLayout.setHorizontalGroup(
            sellsSectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellsSectionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sellsSectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        sellsSectionJPanelLayout.setVerticalGroup(
            sellsSectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellsSectionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        containerJPanel.add(sellsSectionJPanel);

        optionsJMenu.setText("Opciones");
        optionsJMenu.setToolTipText("");

        specialClientJMenuButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        specialClientJMenuButton.setText("Cliente especial");
        specialClientJMenuButton.setToolTipText("Ingresa el codigo de cliente especial para descuentos");
        optionsJMenu.add(specialClientJMenuButton);

        sortAllShopsJMenuButotn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        sortAllShopsJMenuButotn.setText("Todas las tiendas");
        sortAllShopsJMenuButotn.setToolTipText("Busca items en todas las tiendas, no solo la actual");
        optionsJMenu.add(sortAllShopsJMenuButotn);

        jMenuBar1.add(optionsJMenu);

        jMenu2.setText("Venta");

        insertNitJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        insertNitJMenuItem.setText("NIT");
        jMenu2.add(insertNitJMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(containerJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(containerJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton addToCartJButton;
    public javax.swing.JTable cartlistJTable;
    public javax.swing.JButton checkoutJButton;
    private javax.swing.JPanel containerJPanel;
    public javax.swing.JTextField cuantityAddJTextField;
    public javax.swing.JMenuItem insertNitJMenuItem;
    private javax.swing.JPanel inventoryAddSectionPanel;
    private javax.swing.JPanel inventoryListSectionJPanel;
    private javax.swing.JPanel inventorySearchJPanel;
    private javax.swing.JPanel inventorySectionJPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JButton loadMoreJButton;
    public javax.swing.JLabel nameJLabel;
    public javax.swing.JLabel nitJLabel;
    public javax.swing.JMenu optionsJMenu;
    public javax.swing.JTable productsResultJTable;
    public javax.swing.JButton searchJButton;
    public javax.swing.JTextField searchJTextField;
    public javax.swing.JComboBox<String> searchTypeJComboBox;
    private javax.swing.JPanel sellsSectionJPanel;
    public javax.swing.JCheckBoxMenuItem sortAllShopsJMenuButotn;
    public javax.swing.JLabel specialClientJLabel;
    public javax.swing.JMenuItem specialClientJMenuButton;
    public javax.swing.JLabel totalJLabel;
    // End of variables declaration//GEN-END:variables

    // CUSTOM CODE
    /**
     * Muestra un mensaje emerjente y devuelve el valor ingresado
     *
     * @param message el emnsaje a mostrar
     * @param title el titulo del popup
     * @param messageType el tipo de me
     * @return
     */
    public String showInputPopUp(String message, String title, int messageType) {
        String input = JOptionPane.showInputDialog(this, message, title, messageType);
        if (input != null && !input.isEmpty()) {
            return input;
        } else {
            return "";
        }
    }

    public void showPopUp(String message, String title, int messageType) {
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }

    /**
     * Muestra productos en la tabla de productos
     *
     * @param items
     */
    public void displayProducts(ArrayList<InventarioSucursal> items) {
        DefaultTableModel model = (DefaultTableModel) this.productsResultJTable.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        // configuramos la tabla por cada consulta nueva
        items.forEach(_item -> {
            try { // agregamos los elementos en la vista
                model.addRow(new Object[]{
                    _item.getInventory().getId(), // id del inventario, identifica la pieza, talla y color
                    _item.getInventory().getColor().getColor(), // color
                    _item.getInventory().getProductoTalla().getProduct().getName(), // el nombre de la pieza
                    _item.getInventory().getProductoTalla().getSize().getSize(), // la talla
                    _item.getInventory().getProductoTalla().getPrice(), // precio normal
                    _item.getInventory().getProductoTalla().getSpecialPrice(), // precio clientes especiales
                    _item.getSucursal().getDirection(), // la tienda donde se encuentra, en esta ventana solo mostrara items de CurrentUser.SalesDep
                    _item.getStock() // la cantidad disponible para venta
                });
            } catch (Exception e) {
                // TODO display error on CONSOLE
                System.out.println(CustomException.formatError(e.getMessage(), this.getClass()));
            }
        });
        // actualizamos la tabla
        this.productsResultJTable.setModel(model); // actualizamos el modelo
        this.addSortKeyToTable(model, this.productsResultJTable); // agregamos sortkey para que se pueda filtrar la tabla
    }

    /**
     * COnfigura un SortKey para una tabla a partir d eun tableModel
     *
     * @param tableModel el modelo al que queremos agregar sortkey
     * @param table la tabla a la que se le pondra el sortkey
     */
    private void addSortKeyToTable(DefaultTableModel tableModel, JTable table) {
        // agregamos un sroter para la tabla
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
        table.setRowSorter(sorter);
        // Ordenamos por defecto por ID PIEZA
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING)); // usaremos el Id Pieza para recuperar la info
        // TODO hacer que se mantenga el sort en la columna que pusieron incluso despues de generar una nueva buscqueda
        sorter.setSortKeys(sortKeys);
        // NOTA: para recuperar el elemento seleccionado si se ha hecho un sort, con el siguiente metodo
        // int selected = this.view.productsResultJTable.convertRowIndexToModel(this.view.productsResultJTable.getSelectedRow());
    }

    /**
     * Este metodo muestra en la tabla de lista de compra los productos
     * mostrados
     */
    public void displayOnShoppingCartTable(ArrayList<CartItem> items, ClienteEspecial specialCLient, ShoppingCart cart) {
        DefaultTableModel model = (DefaultTableModel) this.cartlistJTable.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        // mostramos los datos que estan en el carrito de compras
        items.forEach(_item -> {
            try { // agregamos el elemento
                double tmpPrice = specialCLient != null ? _item.getProduct().getInventory().getProductoTalla().getSpecialPrice() : _item.getProduct().getInventory().getProductoTalla().getPrice();
                cart.setTotal(cart.getTotal() + tmpPrice * _item.getCuantity());
                // actualizamos total
                model.addRow(new Object[]{
                    _item.getProduct().getInventory().getId(),
                    _item.getProduct().getInventory().getProductoTalla().getProduct().getName(),
                    _item.getProduct().getInventory().getProductoTalla().getSize().getSize(),
                    _item.getProduct().getInventory().getColor().getColor(),
                    tmpPrice,
                    _item.getCuantity(),
                    _item.getCuantity() * tmpPrice
                });
            } catch (Exception e) {
                System.out.println(CustomException.formatError(e.getMessage(), this.getClass()));
            }
        });
        // mostramos los datos finales
        this.cartlistJTable.setModel(model);
        this.addSortKeyToTable(model, this.cartlistJTable);
        this.totalJLabel.setText(String.format("Total: Q%1$s", cart.getTotal()));
    }

    /**
     * COnfigura el NIT para la generacion de la venta
     *
     * @return
     */
    public String setupNIT() {
        // obtenemos el valor
        String nit = this.showInputPopUp("Ingresa el NIT para la factura", "NIT", JOptionPane.QUESTION_MESSAGE).trim().toLowerCase();
        try {
            // actualizamos nit en caso de error
            nit = nit.isBlank() || nit.isEmpty() ? "CF" : nit;
            if (!nit.matches("[0-9]+|(cf)")) { // solo aceptamos numeros en el nit
                this.showPopUp("NIT INVALIDO", "NIT", JOptionPane.WARNING_MESSAGE);
                nit = "CF";
            }
            // actualizamos la vista
            this.nitJLabel.setText(String.format("NIT: %1$s", nit));
        } catch (Exception e) {
            System.out.println(CustomException.formatError(e.getMessage(), this.getClass()));
        }
        return nit;
    }

    public void displayBillData(String nit, String name, ClienteEspecial specialClient) {
        this.specialClientJLabel.setText(specialClient != null ? String.format("Cliente especial: CODIGO[%2$s]", specialClient.getName(), specialClient.getId()) : "Cliente especial: ");
        this.nitJLabel.setText(String.format("NIT: %1$s",nit));
        this.nameJLabel.setText(String.format("Nombre: %1$s", name));
    }

    public String setupUserBillName() {
        String name = this.showInputPopUp("Ingresa el nombre para la factura", "NOMBRE", JOptionPane.QUESTION_MESSAGE).trim();
        this.nameJLabel.setText("Nombre: " + name);
        return name;
    }

}
